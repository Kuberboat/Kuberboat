syntax = "proto3";

package kubelet_apiserver_service;

option go_package = "p9t.io/kuberboat/pkg/proto";

import "default.proto";

message NotifyRegisteredRequest {
    bytes apiserver = 1;
}

message KubeletCreatePodRequest {
    bytes pod = 1;
}

message KubeletDeletePodRequest {
    string pod_name = 1;
}

message KubeletTransferFileRequest {
    string file_type = 1;
    bytes file = 2;
}

message KubeletGetPodLogRequest {
    string pod_name = 1;
}

message KubeletGetPodLogResponse {
    string log = 1;
}

message KubeletCreateServiceRequest {
    string service_name = 1;
    string cluster_ip = 2;
    repeated bytes service_ports = 3;
    repeated string pod_names = 4;
    repeated string pod_ips = 5;
}

message KubeletDeleteServiceRequest {
    string service_name = 1;
}

message KubeletUpdateServiceRequest {
    repeated string service_names = 1;
    string pod_name = 2;
    string pod_ip = 3;
}

// Service on API Server for Kubectl.
service KubeletApiServerService {
    rpc NotifyRegistered(NotifyRegisteredRequest) returns(default.DefaultResponse);
    rpc CreatePod(KubeletCreatePodRequest) returns(default.DefaultResponse);
    rpc DeletePod(KubeletDeletePodRequest) returns(default.DefaultResponse);
    rpc TransferFile(KubeletTransferFileRequest) returns(default.DefaultResponse);
    rpc GetPodLog(KubeletGetPodLogRequest) returns(KubeletGetPodLogResponse);
    rpc CreateService(KubeletCreateServiceRequest) returns(default.DefaultResponse);
    rpc DeleteService(KubeletDeleteServiceRequest) returns(default.DefaultResponse);
    rpc AddPodToServices(KubeletUpdateServiceRequest) returns(default.DefaultResponse);
    rpc DeletePodFromServices(KubeletUpdateServiceRequest) returns(default.DefaultResponse);
}
